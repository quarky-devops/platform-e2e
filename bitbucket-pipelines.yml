image: node:18

definitions:
  services:
    docker:
      memory: 4096

pipelines:
  branches:
    main:
      - step:
          name: "Deploy QuarkfinAI to AWS"
          deployment: production
          script:
            - echo "Starting QuarkfinAI deployment..."
            - apt-get update && apt-get install -y wget unzip jq
            # Install Go
            - wget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz
            - tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz
            - export PATH=$PATH:/usr/local/go/bin
            - go version
            - npm install -g aws-cdk@2.100.0
            - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            - unzip awscliv2.zip
            - ./aws/install
            - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            - aws configure set region $AWS_DEFAULT_REGION
            - aws sts get-caller-identity
            - cd infrastructure
            - npm install
            - npm run build
            - export JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1
            - cdk bootstrap --require-approval never || echo "Already bootstrapped"
            - echo "Deploying VPC..."
            - cdk deploy QuarkfinVpcStack --require-approval never
            - echo "Deploying Security..."
            - cdk deploy QuarkfinSecurityStack --require-approval never
            - echo "Deploying Auth..."
            - cdk deploy QuarkfinAuthStack --require-approval never
            - echo "Deploying Database..."
            - cdk deploy QuarkfinDatabaseStack --require-approval never
            - echo "Deploying App..."
            - cdk deploy QuarkfinAppStack --require-approval never
            - echo "Deploying CDN..."
            - cdk deploy QuarkfinCdnStack --require-approval never
            - export CDN_DOMAIN=$(aws cloudformation describe-stacks --stack-name QuarkfinCdnStack --query 'Stacks[0].Outputs[?OutputKey==`DistributionDomainName`].OutputValue' --output text)
            - export ALB_DNS=$(aws cloudformation describe-stacks --stack-name QuarkfinAppStack --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' --output text)
            - export USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name QuarkfinAuthStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
            - export CLIENT_ID=$(aws cloudformation describe-stacks --stack-name QuarkfinAuthStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
            - cd ../frontend
            - export NEXT_PUBLIC_AWS_REGION=$AWS_DEFAULT_REGION
            # Use repository variables directly
            - export NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID
            - export NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID
            - npm install
            - npm run build
            - cd ../go_backend
            - export PATH=$PATH:/usr/local/go/bin
            - go build -o quarkfin-backend .
            # Deploy applications to EC2
            - echo "Deploying applications to EC2..."
            - export INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name QuarkfinAppStack --query 'Stacks[0].Outputs[?OutputKey==`AppInstanceId`].OutputValue' --output text)
            - echo "Instance ID: $INSTANCE_ID"
            # Create deployment package
            - cd ..
            - mkdir deployment-package
            - cp -r frontend/.next deployment-package/
            - cp -r frontend/public deployment-package/
            - cp frontend/package.json deployment-package/
            - cp go_backend/quarkfin-backend deployment-package/
            # Create S3 bucket for deployment
            - export DEPLOY_BUCKET="quarkfin-deploy-$(date +%s)"
            - aws s3 mb s3://$DEPLOY_BUCKET --region $AWS_DEFAULT_REGION
            - tar -czf deployment.tar.gz -C deployment-package .
            - aws s3 cp deployment.tar.gz s3://$DEPLOY_BUCKET/
            # Deploy to EC2 via SSM
            - echo "Deploying to EC2 instance $INSTANCE_ID..."
            - |
              aws ssm send-command \
                --instance-ids $INSTANCE_ID \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=["cd /opt/quarkfin && sudo -u ec2-user aws s3 cp s3/'$DEPLOY_BUCKET'/deployment.tar.gz . --region '$AWS_DEFAULT_REGION'","cd /opt/quarkfin && sudo -u ec2-user tar -xzf deployment.tar.gz","cd /opt/quarkfin && sudo -u ec2-user pm2 stop all || true","cd /opt/quarkfin && sudo -u ec2-user pm2 delete all || true","cd /opt/quarkfin && sudo -u ec2-user npm install --production","cd /opt/quarkfin && sudo -u ec2-user pm2 start npm --name quarkfin-frontend -- start -- -p 3001","cd /opt/quarkfin && sudo -u ec2-user PORT=8081 pm2 start ./quarkfin-backend --name quarkfin-backend","sudo -u ec2-user pm2 status"]' \
                --output text \
                --query 'Command.CommandId' > /tmp/command_id.txt
            - echo "EC2 deployment command sent. Command ID: $(cat /tmp/command_id.txt)"
            - echo "Applications deployed to EC2!"
            - echo "Deployment completed successfully!"
            - echo "Frontend URL - https://$CDN_DOMAIN"
            - echo "API URL - https://$CDN_DOMAIN/api"
            - echo "Load Balancer - http://$ALB_DNS"
            - echo "Point app.quarkfin.ai CNAME to $CDN_DOMAIN"

  default:
    - step:
        name: "Build & Test"
        script:
          - echo "Building QuarkfinAI platform..."
          # Install Go
          - apt-get update && apt-get install -y wget
          - wget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz
          - tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz
          - export PATH=$PATH:/usr/local/go/bin
          - go version
          # Set dummy env vars for build test only
          - export NEXT_PUBLIC_COGNITO_USER_POOL_ID=dummy-pool-id
          - export NEXT_PUBLIC_COGNITO_CLIENT_ID=dummy-client-id
          - cd frontend && npm install && npm run build
          - cd ../go_backend && export PATH=$PATH:/usr/local/go/bin && go build -o quarkfin-backend .
          - echo "Build completed successfully"
